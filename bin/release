#!/usr/bin/env ruby

require "pathname"
ENV["BUNDLE_GEMFILE"] ||= File.expand_path("../../Gemfile", Pathname.new(__FILE__).realpath)

bundle_binstub = File.expand_path("../bundle", __FILE__)

if File.file?(bundle_binstub)
  if File.read(bundle_binstub, 300) =~ /This file was generated by Bundler/
    load(bundle_binstub)
  else
    abort("Your `bin/bundle` was not generated by Bundler, so this binstub cannot run.
Replace `bin/bundle` by running `bundle binstubs bundler --force`, then run this command again.")
  end
end

require "rubygems"
require "bundler/setup"
require "bundler/gem_tasks"

require "optparse"
require "active_support"
require "lookbook"

class Task
  def initialize(args, options = {})
    @args = args
    @options = options
  end

  def log(message)
    puts message
  end

  alias_method :info, :log
  alias_method :success, :log
  alias_method :error, :log

  class << self
    def call(args, opts = nil)
      if opts.nil?
        parsed_options = {}
        options.parse!(into: parsed_options)
      else
        parsed_options = opts
      end

      new(args, parsed_options).call
    end

    def options
      OptionParser.new
    end
  end
end

class BumpVersionTask < Task
  def initialize(args, options)
    @version = args.shift
    raise ArgumentError, "No version number provided" unless @version.present?

    super(args, options)
  end

  def new_version
    @version.gsub("v", "").tr("-", ".")
  end

  def current_version
    Lookbook::VERSION.to_s
  end

  def version_file
    File.expand_path("#{File.dirname(__FILE__)}/../lib/lookbook/version.rb")
  end

  def call
    info "Bumping Lookbook version from `#{current_version}` to `#{new_version}`"

    unless @options[:"dry-run"]
      file = File.open(version_file)
      contents = file.read
      File.write(version_file, contents.gsub(current_version, new_version))
    end

    success "Version bump complete"
  end

  def self.options
    OptionParser.new do |opts|
      opts.on "--dry-run", "Perform a dry run"
    end
  end
end

class PackageGemTask < Task
  def call
    info "Building Lookbook gem"

    unless @options[:"dry-run"]
      Rake::Task["build"].execute
    end

    success "Gem build complete"
  end

  def self.options
    OptionParser.new do |opts|
      opts.on "--dry-run", "Perform a dry run"
    end
  end
end

class PublishGemTask < Task
  def gem_version
    Lookbook::VERSION.to_s
  end

  def pkg_dir
    File.expand_path("#{File.dirname(__FILE__)}/../pkg")
  end

  def call
    info "Publishing Lookbook v#{gem_version} to RubyGems"

    # successful = @options[:"dry-run"] ? true : "gem push #{pkg_dir}/lookbook-#{gem_version}.gem"
    successful = true

    successful ? success("Gem published") : error("Error publishing Gem")
  end

  def self.options
    OptionParser.new do |opts|
      opts.on "--dry-run", "Perform a dry run"
    end
  end
end

class PackageAndPublishTask < Task
  def call
    PackageGemTask.call(@args, @options)
    PublishGemTask.call(@args, @options)
  end

  def self.options
    OptionParser.new do |opts|
      opts.on "--dry-run", "Perform a dry run"
    end
  end
end

class ReleaseTask < Task
  def call
    info "Starting release process"

    system "npm run release#{" -- --dry-run" if @options[:"dry-run"]}"
  end

  def self.options
    OptionParser.new do |opts|
      opts.on "--dry-run", "Perform a dry run"
    end
  end
end

begin
  args = ARGV.filter { !_1.start_with?("-") }
  task_name = args.none? ? "release_task" : "#{args.shift}_task"
  task_name.camelize.constantize.call(args)
rescue NameError
  abort("Unknown task `#{task_name.sub("_task", "")}`")
end
